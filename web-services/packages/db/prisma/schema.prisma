generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       
  name        String?
  publicKey   String       @unique
  timeoutAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  VMInstances VMInstance[]
  DepinHostMachines DepinHostMachine[]

  @@index([email])
  @@index([publicKey])
}

model VMInstance {
  id            String     @id @default(cuid())
  userId        String     @unique
  name          String
  jobId         String    @unique
  PaymentType  PaymentType @default(DURATION)
  status        String      @default("BOOTING")
  publicKey     String?
  ipAddress     String?
  startTime     DateTime
  endTime       DateTime
  price         Float
  region        String  @default("asia-south-2c")
  provider      VMProvider      
  instanceId    String?   
  createdAt     DateTime    @default(now())

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  VMConfig      VMConfig?
  VMImage       VMImage?

  @@index([userId])
  @@index([status])
  @@index([provider])
  @@index([region])
  @@index([startTime, endTime])
}

model VMConfig {
  id          String      @id @default(cuid())
  vmId        String      @unique
  os          String
  machineType String
  diskSize    String
  createdAt   DateTime    @default(now())

  VmInstance VMInstance  @relation(fields: [vmId], references: [id])
}

model VMImage {
  id                  String      @id @default(cuid())
  name                String      @unique
  description         String?
  dockerImage         String
  cpu                 Int
  ram                 Int
  diskSize            Int
  createdAt           DateTime    @default(now())
  depinHostMachineId  String      @unique

  DepinHostMachine    DepinHostMachine @relation(fields: [depinHostMachineId], references: [id])
  VmInstance VMInstance  @relation(fields: [id], references: [id])

  @@index([name])
}


model VMTypes {
  id            String      @id @default(cuid())
  machineType   String      @unique
  cpu           Int
  ram           Int
  priceMonthlyUSD  Float
  description    String?
}

model DepinHostMachine {
  id            String      @id @default(cuid())
  Key           String
  machineType   String
  ipAddress     String
  cpu           Int
  ram           Int
  diskSize      Int
  os            String
  isActive      Boolean     @default(false)
  isOccupied    Boolean     @default(false)
  verified      Boolean     @default(false)
  region        String
  userPublicKey String      @unique
  pdaAddress    String?
  claimedSOL    Float?      @default(0)
  createdAt     DateTime    @default(now())
  user          User?       @relation(fields: [userPublicKey], references: [publicKey])
  VMImage       VMImage?

  @@index([machineType])
  @@index([region])
  @@index([isActive])
  @@index([verified])
  @@index([userPublicKey])
}

enum VMProvider {
  AWS
  AZURE
  GCP
  DIGITALOCEAN
  VULTR
  LOCAL
}

enum PaymentType {
  DURATION
  ESCROW
}